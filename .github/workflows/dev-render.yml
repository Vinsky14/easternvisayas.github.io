name: Deploy to Development Environment

# /client app - deploy to Firebase Hosting
# /server app - deploy to Render.com (development) app

on:
  push:
    branches:
      - dev

env:
  DEPLOYMENT_PLATFORM: ${{ vars.DEPLOYMENT_PLATFORM }}
  REGION_NAME: ${{ secrets.REGION_NAME }}
  LIVE_ORIGIN: ${{ secrets.LIVE_ORIGIN_DEV }}

jobs:
  lint-client:
    name: Lint and Export client
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_BASE_PATH: ""
      BASE_URL: ${{ secrets.BASE_URL_DEV }}
      BASE_URL_PROD: ${{ secrets.BASE_URL_PROD }}
      BASE_API_URL: ${{ secrets.API_BASE_URL_DEV }}
      FIREBASE_CONFIG_URL: ${{ secrets.FIREBASE_CONFIG_URL_DEV }}
      MAPBOX_USERNAME: ${{ secrets.MAPBOX_USERNAME }}
      MAPBOX_BASEMAP_STYLE_ID: ${{ secrets.MAPBOX_BASEMAP_STYLE_ID }}
      MAPBOX_DATASET_ID: ${{ secrets.MAPBOX_DATASET_ID }}
      MAPBOX_API_KEY: ${{ secrets.MAPBOX_API_KEY }}
      PAGASA_EXCEL_FILE: ${{ secrets.PAGASA_EXCEL_FILE }}
      OPENWEATHERMAP_APPID: ${{ secrets.OPENWEATHERMAP_APPID }}
      DEFAULT_PROVINCE: ${{ secrets.DEFAULT_PROVINCE }}
      DEFAULT_MUNICIPALITY: ${{ secrets.DEFAULT_MUNICIPALITY }}
      NEXT_PUBLIC_GEOJSON_URL: ${{ secrets.NEXT_PUBLIC_GEOJSON_URL }}
      NEXT_PUBLIC_FIREBASE_WEB_API_KEY: ${{ secrets.FIREBASE_WEB_API_KEY_DEV }}
      NEXT_PUBLIC_FIREBASE_WEB_AUTHDOMAIN: ${{ secrets.FIREBASE_WEB_AUTHDOMAIN_DEV }}
      NEXT_PUBLIC_FIREBASE_WEB_PROJECT_ID: ${{ secrets.FIREBASE_WEB_PROJECT_ID_DEV }}
      NEXT_PUBLIC_FIREBASE_WEB_STORAGE_BUCKET: ${{ secrets.FIREBASE_WEB_STORAGE_BUCKET_DEV }}
      NEXT_PUBLIC_FIREBASE_WEB_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_WEB_MESSAGING_SENDER_ID_DEV }}
      NEXT_PUBLIC_FIREBASE_WEB_APP_ID: ${{ secrets.FIREBASE_WEB_APP_ID_DEV }}
      NEXT_PUBLIC_FIREBASE_WEB_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_WEB_MEASUREMENT_ID_DEV }}
      NEXT_PUBLIC_CHECK_RANGE_YEAR: ${{ secrets.NEXT_PUBLIC_CHECK_RANGE_YEAR_DEV }}
      CROPPING_CALENDAR_RICE_EXCEL_FILE: ${{ secrets.CROPPING_CALENDAR_RICE_EXCEL_FILE }}
      CROPPING_CALENDAR_CORN_EXCEL_FILE: ${{ secrets.CROPPING_CALENDAR_CORN_EXCEL_FILE }}
      RECOMMENDATIONS_RICE_EXCEL_FILE: ${{ secrets.RECOMMENDATIONS_RICE_EXCEL_FILE }}
      RECOMMENDATIONS_CORN_EXCEL_FILE: ${{ secrets.RECOMMENDATIONS_CORN_EXCEL_FILE }}
      REGION_CODE: ${{ secrets.REGION_CODE }}
      REGION_NAME: ${{ secrets.REGION_NAME }}
      REGION_LAT_AND_LNG: ${{ secrets.REGION_LAT_AND_LNG }}
      REGIONAL_FIELD_OFFICE: ${{ secrets.REGIONAL_FIELD_OFFICE }}
      REGION_URL: ${{ secrets.REGION_URL }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Use NodeJS v16.14.2
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.2
      - name: Install Dependencies
        run: |
          cd client
          npm install
      - name: Lint
        run: |
          cd client
          npm run lint
      - name: Export static files
        run: |
          cd client
          npm run export
          mv out/404/index.html out/404.html
          mkdir out/files
          cd .. && cp server/src/scripts/data/dataset_v2.0/*.* client/out/files/
          cp server/src/scripts/data/pagasa_seasonal_v2.xlsx client/out/files/
      - name: Archive Development Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dev-out
          path: |
            client/out
            client/.firebaserc
            client/firebase.json
          retention-days: 3

  lint-server:
    name: Lint Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Use NodeJS v16.14.2
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.2
      - name: Install Dependencies and lint
        run: |
          cd server
          npm install
          npm run lint

  deploy-client:
    name: Deploy Client to Firebase Hosting
    needs: lint-client
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: dev-out
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: use ${{ secrets.FIREBASE_APP_DEV }} && firebase deploy --only hosting:dev

        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  deploy-server:
    name: Deploy Server to Render Development
    needs: lint-server
    runs-on: ubuntu-latest
    env:
      RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_DEV }}
    steps:
      - name: Call the Render deploy hook
        run: wget $RENDER_DEPLOY_HOOK
      - name: Render Post Deploy Message
        run: echo "Success! Render deploy hook called. Please check the DEV app's deployment status information on its Render dashboard after 10-20 minutes, or wait for deployment notifications in the acap-bicol Slack channel."

  # Set the GitHub Variable DEPLOYMENT_PLATFORM=default to skip deployment to Vercel
  # To enable deployment to Vercel:
  #   1. Initialize a Vercel NodeJS app whose name is $VERCEL_APP_DEV
  #   2. Deploy the server app to it locally using the Vercel CLI (v28.16.7) following the steps from
  #      https://vercel.com/guides/using-express-with-vercel
  #   3. Set the GitHub Variable DEPLOYMENT_PLATFORM=vercel
  deploy-server-vercel:
    name: Deploy Server to Vercel
    if: ${{ vars.DEPLOYMENT_PLATFORM == 'vercel' }}
    needs: lint-server
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEV }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_APP: ${{ secrets.VERCEL_APP_DEV }}
      ROOT_API_URL: ${{ secrets.ROOT_API_URL_DEV }}
      ROOT_API_URL_VERCEL: ${{ secrets.ROOT_API_URL_VERCEL_DEV }}
      IS_RMCAS_API_ACTIVE: ${{ secrets.IS_RMCAS_API_ACTIVE }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Use NodeJS v18.14.
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.2
      - name: Install Vercel CLI
        run: npm install --global vercel@28.16.7
      - name: Pull Vercel Environment Information
        run: |
          cd server
          mkdir $VERCEL_APP
          vercel pull --cwd $VERCEL_APP --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: |
          cd server
          mv $VERCEL_APP/.vercel/ .
          npm install
          npm run gen:docs:vercel
          rm .npmrc
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: |
          cd server
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Post Deployment Clean-up
        run: |
          cd server
          rm -r -f .vercel

  scrape-search-words:
    name: Scrape and Update Search Words
    needs: deploy-client
    runs-on: ubuntu-latest
    env:
      FIREBASE_SERVICE_ACC: ${{ secrets.FIREBASE_SERVICE_ACC_DEV }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY_DEV }}
      EMAIL_WHITELIST: ${{ secrets.EMAIL_WHITELIST }}
      PROVINCES: ${{ secrets.PROVINCES }}
      PROVINCES_ARCHIVE: ${{ secrets.PROVINCES_ARCHIVE }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Use NodeJS v16.14.2
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.2
      - name: Install dependencies
        run: |
          cd server
          npm install
      - name: Run script
        run: |
          cd server
          npm run build:page_index
